{"version":3,"sources":["TopLinks.js","App.js","WordChoice.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","TopLinks","state","top_data","bars","start_date","end_date","non_ribbonfarm","search","getTop","_callee","e","hostname","regenerator_default","a","wrap","_context","prev","next","preventDefault","window","location","axios","get","concat","_this","Access-Control-Allow-Origin","sent","setState","data","stop","handleOutlink","node","open","indexValue","onChange","target","type","Object","defineProperty","name","checked","value","this","topData","barData","length","limit","i","push","link","count","react_default","createElement","className","nivo_bar_esm","keys","indexBy","margin","top","right","bottom","left","padding","colors","scheme","colorBy","item","parser","document","href","includes","slice","animate","motionStiffness","motionDamping","enableGridY","axisBottom","tooltip","style","objectSpread","theme","pathname","onClick","min","max","bar","onSubmit","date","placeholder","Component","App_templateObject","App","App_Container","react_router_dom","to","WordChoice_templateObject","WordChoice","tf_idf","props","wordData","sample_data","authors","updated","getRandom","arr","forEach","authorSample","_","sampleSize","apply","toConsumableArray","handleNewWords","handleNewAuthor","newState","splice","indexOf","_this2","checkBoxes","map","WordChoice_Container","nivo_swarmplot_esm","groups","groupBy","size","articles","parseInt","score","identity","id","label","word","forceStrength","simulationIterations","borderColor","from","modifiers","axisLeft","orient","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","dist_default","Boolean","match","Routing","author","rel","fontFamily","react_router","path","component","render","src_WordChoice","assign","ReactDOM","src_Routing","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3febea93.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { ResponsiveBar } from \"@nivo/bar\";\n\nconst Container = styled.div`\n  height: 50vh;\n  padding: 0rem 2rem;\n  .selection {\n    border-bottom: 2rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n  }\n  .slider {\n    p {\n      text-align: center;\n    }\n  }\n  .date_range {\n    display: flex;\n    justify-content: space-around;\n    align-items: flex-end;\n    width: 50rem;\n  }\n  .input {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n  button {\n    height: 2rem;\n    width: 5rem;\n  }\n`;\n\nclass TopLinks extends Component {\n  state = {\n    top_data: [],\n    bars: 5,\n    start_date: 2007,\n    end_date: 2019,\n    non_ribbonfarm: false,\n    search: \"false\"\n  };\n\n  componentDidMount() {\n    this.getTop();\n  }\n\n  getTop = async e => {\n    if (e) {\n      e.preventDefault();\n    }\n    debugger;\n    const hostname =\n      window.location.hostname === \"localhost\"\n        ? \"http://localhost:5000/\"\n        : \"https://elderblog-analysis.netlify.com/\";\n    const top_data = await axios.get(\n      `${hostname}data/links/${this.state.start_date}-${this.state.end_date}-${\n        this.state.non_ribbonfarm\n      }-${this.state.search}`,\n      {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    );\n    this.setState({ top_data: top_data.data });\n  };\n\n  handleOutlink = node => {\n    window.open(node.indexValue, \"_blank\");\n  };\n\n  onChange = e => {\n    if (e.target.type === \"checkbox\") {\n      this.setState({ [e.target.name]: e.target.checked });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  render() {\n    const topData = this.state.top_data;\n    const barData = [];\n    if (topData.length > 0) {\n      let limit = this.state.bars;\n      if (this.state.bars > topData.length) limit = topData.length;\n      for (let i = 0; i < limit; i++) {\n        barData.push({ link: topData[i][0], count: topData[i][1] });\n      }\n    }\n    return (\n      <Container>\n        <div className=\"header\">\n          <h4>Top In-Linked Items On Ribbonfarm</h4>\n        </div>\n        <ResponsiveBar\n          data={barData}\n          keys={[\"count\"]}\n          indexBy=\"link\"\n          margin={{\n            top: 50,\n            right: 130,\n            bottom: 50,\n            left: 60\n          }}\n          padding={0.3}\n          colors={{\n            scheme: \"pastel1\"\n          }}\n          colorBy={item => {\n            const parser = document.createElement(\"a\");\n            parser.href = item.indexValue;\n            if (parser.hostname.includes(\"www\")) {\n              parser.hostname = parser.hostname.slice(4);\n            }\n            return parser.hostname;\n          }}\n          animate={true}\n          motionStiffness={90}\n          motionDamping={15}\n          enableGridY={true}\n          axisBottom={null}\n          tooltip={item => {\n            const parser = document.createElement(\"a\");\n            parser.href = item.indexValue;\n            return (\n              <div style={{ ...item.theme }}>\n                <p>Hostname: {parser.hostname}</p>\n                <p>Pathname: {parser.pathname}</p>\n                <p>Count: {item.value}</p>\n              </div>\n            );\n          }}\n          onClick={this.handleOutlink}\n        />\n\n        <div className=\"selection\">\n          <div className=\"slider\">\n            <p># of bars {this.state.bars}</p>\n            <input\n              onChange={this.onChange}\n              type=\"range\"\n              name=\"bars\"\n              min=\"1\"\n              max={topData.length}\n              value={this.state.bar}\n            />\n          </div>\n\n          <form className=\"date_range\" onSubmit={this.getTop}>\n            <div className=\"input\">\n              <p>Start Year: {this.state.start_date}</p>\n              <input\n                onChange={this.onChange}\n                name=\"start_date\"\n                type=\"number\"\n                min=\"2007\"\n                max={this.state.end_date}\n                value={this.state.date}\n                placeholder={this.state.start_date}\n              />\n            </div>\n\n            <div className=\"input\">\n              <p>End Year: {this.state.end_date}</p>\n              <input\n                onChange={this.onChange}\n                name=\"end_date\"\n                type=\"number\"\n                min={this.state.start_date}\n                max=\"2019\"\n                placeholder={this.state.end_date}\n                value={this.state.date}\n              />\n            </div>\n\n            <div className=\"input\">\n              <p>Non-Ribbonfarm</p>\n              <input\n                onChange={this.onChange}\n                name=\"non_ribbonfarm\"\n                type=\"checkbox\"\n                checked={\n                  this.state.search !== \"false\"\n                    ? true\n                    : this.state.non_ribbonfarm\n                }\n              />\n            </div>\n            <div className=\"input\">\n              <p>Sub Category</p>\n              <select onChange={this.onChange} name=\"search\">\n                <option value={false}>None</option>\n                <option value=\"amazon\">Books</option>\n                <option value=\"wikipedia\">Wiki's</option>\n                <option value=\"twitter\">Tweets</option>\n                <option value=\"youtube\">Videos</option>\n              </select>\n            </div>\n            <button>Refresh Data</button>\n          </form>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default TopLinks;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  .links {\n    display: flex;\n    justify-content: space-around;\n    width: 20rem;\n    a {\n      text-decoration: none;\n      color: black;\n    }\n    a:hover {\n      color: grey;\n      transition: 0.3s;\n    }\n  }\n`;\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <Container>\n        <h1>Data Visualizations</h1>\n        <div className=\"links\">\n          <Link to=\"/links\">Top Links</Link>\n          <Link to=\"/words\">Semantic Analyszer</Link>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport Spinner from \"react-spinkit\";\nimport _ from \"lodash\";\nimport { ResponsiveSwarmPlot } from \"@nivo/swarmplot\";\n\nconst Container = styled.div`\n  padding: 2rem;\n  height: 60vh;\n  .content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 50vh;\n  }\n  .check_boxes {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    padding-right: 5rem;\n    padding-bottom: 3rem;\n  }\n\n  .input {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 0.8rem;\n    padding: 0.5rem;\n  }\n`;\n\nclass WordChoice extends Component {\n  state = {\n    tf_idf: this.props.wordData,\n    sample_data: [],\n    authors: [\"Venkatesh Rao\"],\n    updated: false\n  };\n  componentDidMount() {\n    const sample_data = this.getRandom(this.state.tf_idf);\n    this.setState({\n      sample_data: sample_data\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.updated && this.props.wordData.length > 2) {\n      this.setState({\n        tf_idf: this.props.wordData,\n        updated: true\n      });\n      this.getRandom(this.props.wordData);\n    }\n  }\n\n  getRandom = arr => {\n    const sample_data = [];\n    arr.forEach(arr => {\n      if (this.state.authors.includes(arr[0])) {\n        const authorSample = _.sampleSize(arr[1], 50);\n        sample_data.push(...authorSample);\n      }\n    });\n    return sample_data;\n  };\n\n  handleNewWords = () => {\n    const sample_data = this.getRandom(this.state.tf_idf);\n    this.setState({ sample_data: sample_data });\n  };\n\n  handleNewAuthor = e => {\n    const newState = this.state.authors;\n    if (e.target.checked && this.state.authors.length < 4) {\n      newState.push(e.target.value);\n      this.setState({ authors: [...newState] });\n    } else if (!e.target.checked && this.state.authors.length > 1) {\n      newState.splice(newState.indexOf(e.target.value), 1);\n      this.setState({ authors: [...newState] });\n    }\n  };\n\n  render() {\n    const checkBoxes = this.state.tf_idf.map(arr => (\n      <div className=\"input\">\n        <p>{arr[0]}</p>\n        <input\n          onChange={this.handleNewAuthor}\n          name=\"authors\"\n          type=\"checkbox\"\n          value={arr[0]}\n          checked={this.state.authors.includes(arr[0])}\n        />\n      </div>\n    ));\n    return (\n      <Container>\n        <div className=\"header\">\n          <h4>Word Choice</h4>\n        </div>\n\n        {!this.state.updated ? (\n          <div className=\"content\">\n            <p>Analyzing 1.2 Million Words!</p>\n            <Spinner name=\"pacman\" />\n          </div>\n        ) : (\n          <ResponsiveSwarmPlot\n            data={this.state.sample_data}\n            groups={this.state.authors}\n            groupBy=\"author\"\n            value=\"score\"\n            size={item => {\n              const size = item.articles.length * parseInt(item.score);\n              if (size > 20) return 20;\n              else return size;\n            }}\n            identity={item => {\n              return item.id;\n            }}\n            label={item => {\n              return item.data.word;\n            }}\n            forceStrength={2}\n            simulationIterations={60}\n            colorBy={item => {\n              return item.value;\n            }}\n            borderColor={{\n              from: \"color\",\n              modifiers: [[\"darker\", 0.6], [\"opacity\", 0.5]]\n            }}\n            margin={{\n              top: 80,\n              right: 100,\n              bottom: 80,\n              left: 100\n            }}\n            axisLeft={{\n              orient: \"left\",\n              tickSize: 10,\n              tickPadding: 5,\n              tickRotation: 0,\n              legend: \"Uniqueness Score\",\n              legendPosition: \"middle\",\n              legendOffset: -76\n            }}\n            motionStiffness={50}\n            motionDamping={10}\n          />\n        )}\n        <div className=\"selection\">\n          <button onClick={this.handleNewWords}>New Words</button>\n          <div className=\"check_boxes\">{checkBoxes}</div>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default WordChoice;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport TopLinks from \"./TopLinks\";\nimport App from \"./App\";\nimport WordChoice from \"./WordChoice\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass Routing extends Component {\n  state = {\n    wordData: [\n      [\n        \"Venkatesh Rao\",\n        [\n          {\n            author: \"Venkatesh Rao\",\n            score: 5,\n            word: \"2x2\",\n            id: \".1\",\n            articles: []\n          }\n        ]\n      ]\n    ]\n  };\n  async componentDidMount() {\n    const hostname =\n      window.location.hostname === \"localhost\"\n        ? \"http://localhost:5000/\"\n        : \"https://elderblog-analysis.netlify.com/\";\n    const data = await axios.get(`${hostname}data/words`, {\n      \"Access-Control-Allow-Origin\": \"*\"\n    });\n    this.setState({ wordData: data.data });\n  }\n  render() {\n    return (\n      <Router>\n        <link\n          rel=\"stylesheet\"\n          href=\"//brick.freetls.fastly.net/Ubuntu:300,400,500,700,300i,400i,500i,700i\"\n        />\n        <div style={{ fontFamily: \"Ubuntu\" }}>\n          <Route path=\"/\" component={App} />\n          <Route path=\"/links\" component={TopLinks} />\n          <Route\n            path=\"/words\"\n            render={props => (\n              <WordChoice {...props} wordData={this.state.wordData} />\n            )}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nReactDOM.render(<Routing />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}